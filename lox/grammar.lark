?start     : program

program    : declaration*

?declaration: var_decl
            | function_decl
            | stmt

?stmt      : expr_stmt
           | print_cmd
           | block
           | if_cmd
           | while_cmd
           | return_cmd
           | for_cmd
           
           // | ...

print_cmd  : "print" expr ";"

block      : "{" declaration* "}"

if_cmd     : "if" "(" expr ")" stmt ["else" stmt]

while_cmd  : "while" "(" expr ")" stmt

for_cmd    : "for" "(" for_init for_cond ";" for_incr ")" stmt
for_init   : var_decl
           | expr_stmt
           | ";"           -> empty_init
for_cond   : expr?          -> maybe_cond
for_incr   : expr?          -> maybe_incr

expr_stmt  : expr ";"


var_decl   : "var" VAR ("=" expr)? ";"
function_decl: "fun" VAR "(" param_list? ")" block    -> function
param_list  : VAR ("," VAR)*
return_cmd  : "return" expr? ";"    -> return_cmd


// EXPRESSÃ•ES

?expr      : assignment

?assignment: call "=" assignment   -> assign_expr
           | or_

?or_       : and_
           | or_ "or" and_   -> or_

?and_      : test
           | and_ "and" test -> and_

?test      : test "==" cmp  -> eq
           | test "!=" cmp  -> ne
           | cmp

?cmp       : cmp ">" factor   -> gt
           | cmp "<" factor   -> lt
           | cmp ">=" factor  -> ge
           | cmp "<=" factor  -> le
           | factor

?factor    : factor "+" term  -> add
           | factor "-" term  -> sub
           | term

?term      : term "*" unary   -> mul
          | term "/" unary   -> div
          | unary

?unary     : "!" unary        -> not_
          | "-" unary        -> neg
          | atom

?atom      : call

call       : primary call_suffix*

call_suffix: "(" params ")"   -> args
           | "." VAR          -> attr

?primary   : NUMBER
           | BOOL
           | VAR
           | STRING
           | NIL
           | "(" expr ")"

params     : [ expr ("," expr )* ]

BOOL.2     : "true" | "false"
VAR.1      : /[a-z_]\w*/
NUMBER     : /([1-9][0-9]*|0)(\.[0-9]+)?/ 
STRING     : /"[^"]*"/
NIL.2      : "nil"
COMMENT    : "//" /[^\n]*/

%ignore /\s/ | COMMENT